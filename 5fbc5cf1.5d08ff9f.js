(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return a})),n.d(t,"default",(function(){return p}));var i=n(3),r=n(7),c=(n(0),n(99)),o={id:"api",title:"api document"},l={unversionedId:"api",id:"api",isDocsHomePage:!1,title:"api document",description:"APIs",source:"@site/docs/api.md",slug:"/api",permalink:"/docs/api",editUrl:"https://github.com/ScriptWidget/scriptwidget.github.io/edit/master/website/docs/api.md",version:"current"},a=[{value:"APIs",id:"apis",children:[{value:"$render",id:"render",children:[]},{value:"console",id:"console",children:[]},{value:"fetch",id:"fetch",children:[]},{value:"$device",id:"device",children:[]},{value:"$gradient",id:"gradient",children:[]},{value:"$getenv",id:"getenv",children:[]},{value:"$json",id:"json",children:[]},{value:"$http",id:"http",children:[]}]}],d={toc:a};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(i.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"apis"},"APIs"),Object(c.b)("h3",{id:"render"},"$render"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"$render")," is the most core api, it specified the ui structure."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'$render(\n  <vstack frame="max">\n    <text font="title">Hello ScriptWidget</text>\n    <text font="caption" color="red">\n      Hello ScriptWidget\n    </text>\n    <text font="caption" background="blue" color="white">\n      Hello ScriptWidget\n    </text>\n  </vstack>\n);\n\n')),Object(c.b)("h3",{id:"console"},"console"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'console.log("Hello ScriptWidget");\n\n')),Object(c.b)("h3",{id:"fetch"},"fetch"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'// fetch\nconst url = "https://jsonplaceholder.typicode.com/todos/1";\nconst result = await fetch(url);\nconst model = JSON.parse(result); // result is string , and model is object\n\n\n// fetch with header\nconst url = "https://api.github.com/users/everettjf/orgs";\nconst result = await fetch(url, {\n  headers: {\n    Accept: "application/vnd.github.inertia-preview+json",\n  },\n});\nconst models = JSON.parse(result);\n')),Object(c.b)("h3",{id:"device"},"$device"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},"console.log($device.name());\nconsole.log($device.model());\nconsole.log($device.language());\nconsole.log($device.systemVersion());\nconsole.log(JSON.stringify($device.screen(), null, 2));\nconsole.log(JSON.stringify($device.battery(), null, 2));\nconsole.log($device.isdarkmode());\n\n")),Object(c.b)("h3",{id:"gradient"},"$gradient"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"$gradient")," works with ",Object(c.b)("inlineCode",{parentName:"p"},"background")," and ",Object(c.b)("inlineCode",{parentName:"p"},"color")," attributes."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'let linearGradient = {\n  type: "linear",\n  colors: ["blue", "white", "pink"],\n  startPoint: "topLeading",\n  endPoint: "bottomTrailing",\n};\n\nlet angularGradient = {\n  type: "angular",\n  colors: ["green", "blue", "black", "green", "blue", "black", "green"],\n  center: "center",\n};\n\nlet radialGradient = {\n  type: "radial",\n  colors: ["orange", "red", "white"],\n  center: "center",\n  startRadius: 100,\n  endRadius: 470,\n};\n\n$render(\n  <vstack background={$gradient(linearGradient)} frame="max">\n    <text font="title">LinearGradient</text>\n  </vstack>\n);\n\n')),Object(c.b)("h3",{id:"getenv"},"$getenv"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"$getenv")," can get several environment state. But for now, getenv only support ",Object(c.b)("inlineCode",{parentName:"p"},"widget-size"),"."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'/*\n widget-size\n - large\n - medium\n - small\n*/\nconst widget_size = $getenv("widget-size");\n\nif (widget_size == "small") {\n  //...\n}\n')),Object(c.b)("h3",{id:"json"},"$json"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"$json")," used for some complex attributes. It simply called ",Object(c.b)("inlineCode",{parentName:"p"},"JSON.stringfy")," internal."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'var percent = $device.battery().level * 100;\npercent = percent.toFixed(0);\n\nlet gaugeSections = [\n  {color: "yellow", value: 0.1},\n  {color: "blue", value: 0.2},\n  {color: "orange", value: 0.3},\n  {color: "green", value: 0.4},\n];\n\n$render(\n  <vstack frame="max">\n    <gauge \n      value={percent/100}\n      sections={$json(gaugeSections)}\n      >\n    </gauge>\n  </vstack>\n);\n\n')),Object(c.b)("h3",{id:"http"},"$http"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"$http.get"),Object(c.b)("li",{parentName:"ul"},"$http.post"),Object(c.b)("li",{parentName:"ul"},"$http.put"),Object(c.b)("li",{parentName:"ul"},"$http.patch"),Object(c.b)("li",{parentName:"ul"},"$http.delete")),Object(c.b)("p",null,"The second parameter for each api supports: "),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"headers"),Object(c.b)("li",{parentName:"ul"},"body : usually usefull for post body")),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre"},'const result = await $http.get("https://jsonplaceholder.typicode.com/todos/1");\nconst result = await $http.post("https://jsonplaceholder.typicode.com/posts", {\n  body: {\n    userId: 1,\n    id: 1,\n    title: "Hello ScriptWidget",\n  }\n});\nconst result = await $http.post("https://jsonplaceholder.typicode.com/posts", {  \n  headers: {\n    Accept: "application/vnd.github.inertia-preview+json",\n  },\n  body: {\n    userId: 1,\n    id: 1,\n    title: "Hello ScriptWidget",\n  }\n});\n')))}p.isMDXComponent=!0}}]);